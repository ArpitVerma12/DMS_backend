{"version":3,"sources":["../../src/controller/deno.js"],"names":["pool","require","generateNumericValue","getSignedUrl","S3Client","GetObjectCommand","exports","createDemo","req","res","connection","body","name","Category","Number","playList","size","Type","image","files","url","location","connect","check","aid","query","result","rowCount","values","status","send","message","console","error","release","viewDemo","category","type","log","findQuery","undefined","demoData","rows","row","d_id","number","playlist","fileUrl","key","substring","lastIndexOf","s3Client","region","process","env","BUCKET_REGION","credentials","accessKeyId","ACCESS_KEY","secretAccessKey","SECRET_ACCESS_KEY","command","Bucket","BUCKET_NAME","Key","expiresIn","signedUrl","push","length","data"],"mappings":"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","file":"deno.js","sourcesContent":["const pool = require(\"../config/pool\");\r\nconst generateNumericValue = require(\"../Generator/NumericId\");\r\nconst { getSignedUrl } = require('@aws-sdk/s3-request-presigner');\r\nconst { S3Client, GetObjectCommand } = require('@aws-sdk/client-s3');\r\n\r\nexports.createDemo = async (req, res) => {\r\n    let connection;\r\n    try {\r\n        const{name,Category,Number,playList,size,Type}=req.body;\r\n        const image= req.files.image;\r\n        const url = image[0].location;\r\n        connection=await pool.connect();\r\n\r\n        const check = 'SELECT * FROM demo WHERE d_id = $1';\r\n        let aid = 'D-' + generateNumericValue(8);\r\n        let result = await connection.query(check, [aid]);\r\n  \r\n        while (result.rowCount > 0) {\r\n          aid = 'D-' + generateNumericValue(8);\r\n          result = await connection.query(check, [aid]);\r\n        }\r\n  \r\n        const query = 'INSERT INTO demo(name,d_id,Category,Number,playList,size,Type,url) VALUES ($1, $2, $3, $4, $5,$6,$7,$8)';\r\n        const values = [name, aid, Category,Number,playList,size,Type, url];\r\n        await connection.query(query, values);\r\n      \r\n  \r\n      return res.status(201).send({ message: 'Created successfully' });\r\n      } catch (error) {\r\n          console.error(error);\r\n      return res.status(400).send({ message: 'Error creating !' });\r\n      }\r\n      finally {\r\n          if (connection) {\r\n            await connection.release();\r\n          }\r\n      }\r\n    };\r\n\r\n\r\n\r\n\r\n  \r\n\r\n  exports.viewDemo = async (req, res) => {\r\n    let connection;\r\n    try {\r\n      const { name, category, type  } = req.query;\r\n      console.log(req.query);\r\n      connection = await pool.connect();\r\n  \r\n      let findQuery = 'SELECT * FROM demo WHERE true';\r\n  \r\n      if (name !== undefined) {\r\n        findQuery += ` AND name = '${name}'`;\r\n      }\r\n  \r\n      if (category !== undefined) {\r\n        findQuery += ` AND category = '${category}'`;\r\n      }\r\n  \r\n      if (type !== undefined) {\r\n        findQuery += ` AND type = ${type}`;\r\n      }\r\n  \r\n      const result = await connection.query(findQuery);\r\n  \r\n      if (result.rowCount === 0) {\r\n        return res.status(404).send({ message: 'No records found' });\r\n      }\r\n  \r\n      const demoData = [];\r\n  \r\n      for (const row of result.rows) {\r\n        const { name, d_id, category, number, url,type,playlist } = row;\r\n        const fileUrl = url;\r\n        const key = 'demo1/' + fileUrl.substring(fileUrl.lastIndexOf('/') + 1);\r\n  \r\n        try {\r\n          const s3Client = new S3Client({\r\n            region: process.env.BUCKET_REGION,\r\n            credentials: {\r\n              accessKeyId: process.env.ACCESS_KEY,\r\n              secretAccessKey: process.env.SECRET_ACCESS_KEY,\r\n            },\r\n          });\r\n  \r\n          const command = new GetObjectCommand({\r\n            Bucket: process.env.BUCKET_NAME,\r\n            Key: key,\r\n          });\r\n          const signedUrl = await getSignedUrl(s3Client, command, { expiresIn: 36000 });\r\n  \r\n          demoData.push({ name, d_id, category, number,type, url: signedUrl,playlist });\r\n        } catch (error) {\r\n          console.error(`Error retrieving file '${key}': ${error}`);\r\n        }\r\n      }\r\n  \r\n      if (demoData.length === 0) {\r\n        return res.status(404).send({ error: 'Data not found.' });\r\n      }\r\n  \r\n      return res.send({ data: demoData });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return res.status(500).send({ message: 'Internal server error!' });\r\n    } finally {\r\n      if (connection) {\r\n        await connection.release();\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n\r\n  "]}