{"version":3,"sources":["../../src/Middleware/d.js"],"names":["require","S3Client","PutObjectCommand","multer","multerS3","path","s3","region","process","env","BUCKET_REGION","credentials","accessKeyId","ACCESS_KEY","secretAccessKey","SECRET_ACCESS_KEY","s3BucketName","BUCKET_NAME","s3Storage","bucket","contentType","AUTO_CONTENT_TYPE","key","req","file","cb","destination","allowedFiletypes","filename","originalname","toLowerCase","split","length","timestamp","Date","now","originalExtension","extname","fieldname","correctedKey","replace","includes","checkFileType","isScriptFile","createUploadMiddleware","upload","storage","limits","fileSize","fileFilter","fields","name","maxCount","res","next","uploadType","query","uploadMethod","err","MulterError","code","status","json","message","demoUpload","module","exports"],"mappings":"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","file":"d.js","sourcesContent":["const { S3Client, PutObjectCommand } = require('@aws-sdk/client-s3');\r\nconst multer = require('multer');\r\nconst multerS3 = require('multer-s3');\r\nconst path = require('path');\r\n\r\nconst s3 = new S3Client({\r\n  region: process.env.BUCKET_REGION,\r\n  credentials: {\r\n    accessKeyId: process.env.ACCESS_KEY,\r\n    secretAccessKey: process.env.SECRET_ACCESS_KEY\r\n  }\r\n});\r\nconst s3BucketName = process.env.BUCKET_NAME;\r\n\r\nconst s3Storage = multerS3({\r\n  s3,\r\n  bucket: s3BucketName,\r\n  contentType: multerS3.AUTO_CONTENT_TYPE,\r\n  key: function (req, file, cb) {\r\n    const { destination } = req;\r\n    const allowedFiletypes = ['jpeg', 'jpg', 'png', 'gif', 'mp4', 'mov', 'pdf', 'files'];\r\n    const filename = file.originalname.toLowerCase();\r\n  \r\n    if (filename.split('.').length > 2) {\r\n      return cb('Error: Files with multiple extensions are not allowed!');\r\n    }\r\n  \r\n    const timestamp = Date.now();\r\n    const originalExtension = path.extname(file.originalname).toLowerCase();\r\n    const key = `${destination}/${file.fieldname}-${timestamp}${originalExtension}`;\r\n    const correctedKey = key.replace(/%2F/g, '/');\r\n  \r\n    if (allowedFiletypes.includes(originalExtension.replace('.', ''))) {\r\n      return cb(null, correctedKey);\r\n    } else {\r\n      return cb('Error: Images, Videos, and PDFs Only!');\r\n    }\r\n  }\r\n  \r\n  \r\n});\r\n\r\nfunction checkFileType(file, cb) {\r\n  const allowedFiletypes = ['jpeg', 'jpg', 'png', 'gif',  'pdf'];\r\n  const extname = path.extname(file.originalname).toLowerCase().replace('.', '');\r\n\r\n  const isScriptFile = ['.js', '.jsx', '.sh', '.bat', '.cmd','.php','.sql','.py'].includes(extname);\r\n\r\n  if (isScriptFile || !allowedFiletypes.includes(extname)) {\r\n    return cb('Error: Images, Videos, and PDFs Only!');\r\n  }\r\n\r\n  return cb(null, true);\r\n}\r\n\r\n\r\nfunction createUploadMiddleware(destination) {\r\n  const upload = multer({\r\n    storage: s3Storage,\r\n    limits: { fileSize: 1024 * 1024 * 500 },\r\n    fileFilter: function (req, file, cb) {\r\n      checkFileType(file, cb);\r\n    },\r\n  }).fields([{ name: 'image', maxCount: 10 }, { name: 'video', maxCount: 1 }, { name: 'pdf', maxCount: 1 }, { name: 'file', maxCount: 1 }]);\r\n\r\n  return function (req, res, next) {\r\n    req.destination = destination;\r\n\r\n    const uploadType = req.query.uploadType || 'single';\r\n    const uploadMethod = uploadType === 'single' ? 'single' : 'array';\r\n\r\n    upload(req, res, function (err) {\r\n      if (err instanceof multer.MulterError) {\r\n        if (err.code === 'LIMIT_FILE_SIZE') {\r\n          return res.status(400).json({ message: 'Error: File size exceeds the limit (500 MB)' });\r\n        } else {\r\n          return res.status(500).json({ message: 'Multer Error: ' + err.message });\r\n        }\r\n      } else if (err) {\r\n        return res.status(500).json({ message: 'Error: ' + err });\r\n      }\r\n      next();\r\n    });\r\n  };\r\n}\r\n\r\n\r\nconst demoUpload=createUploadMiddleware('demo1');\r\nmodule.exports={demoUpload};\r\n"]}